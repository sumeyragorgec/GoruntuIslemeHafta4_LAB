# -*- coding: utf-8 -*-
"""GoruntuIslemeHafta4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YI3z1qP0vc0rPhOJ2XEiGKdA2VxFIxlo

goruntuIslemeHafta4

# Kütüphaneler
"""

from google.colab import files
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import cv2 as cv

"""# Matrisler"""

# Vektörlerle işlemler
A = [[1,3,5,7],[2,4,6,8],[1,2,3,4],[4,5,6,7]]
A

# Vektörlerle işlemler
value=A[2][1]
value

# Vektörlerle işlemler
T=np.transpose(A)
T

#A vektörünün 0. indeksten 2. indekse kadar olan elemanları gösterir:
value = A[0:2]
value

#A vektörünün 1. indeksten sonuna kadar olan elemanları gösterir:
value=A[1:]
value

#Vektörün ilk elemanından başlayıp, birer atlayarak sona kadar tüm elemanları göstermesi:
value=A[0::2]
value

#Vektörün son elemandan başlayıp, ilk elemana kadar birer atlayarak tersten göstermesi:
value=A[::-2]
value

#tüm elemanların toplamını verir:
s=np.sum(A[ : ])
print('toplam1',s)
s #aralarda yazdırma işlemi yapmak için print kullanınız
a= np.sum (A)
print('toplam2',a)
a

#her bir sütunun/satırın kendi içerisindeki elemanların toplamını verir:
row_sums = np.sum(A, axis=1) #satırlar kendi arasında toplandı
print(row_sums)
#column_sums = np.sum(A, axis=0) #sütunlar kendi arasında toplandı
#print(column_sums)

#bu şekilde yorum satırı yazılabilir
'''
gbjhfhjf
yorumlar yazılabilir
hsdkjhj
'''

"""# Görüntülerle  ilgili işlemler"""

pip install opencv-python matplotlib

# Dosya seç ve yükle
uploaded = files.upload()

# Yüklenen dosyayı/resmi açma
for file_name in uploaded.keys():
   img = Image.open("fener.jpg")
#   img = Image.open("radyolojik.png")
#   img = Image.open("cocuk.jpg")

#görüntünün boyutu
img.size

# Görüntüyü ekranda görüntüleme
plt.imshow(img)
plt.axis('on')  # Eksenleri aç/kapat
plt.show()

#siyah-beyaz bir görüntü okunur.

image = cv.imread('fener.jpg', cv.IMREAD_GRAYSCALE)
#image = cv.imread('radyolojik.png', cv.IMREAD_GRAYSCALE)
#image = cv.imread('cocuk.jpg', cv.IMREAD_GRAYSCALE)

# Orijinal görüntünün histogramını çiz
#Sol tarafta: Orijinal siyah-beyaz görüntü.
#Sağ tarafta: O görüntüdeki her gri tonun dağılımını gösteren histogram (piksel parlaklık değerlerinin grafiği).

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title("Orijinal Görüntü")
plt.imshow(image, cmap='gray')
#plt.imshow(image, cmap='gray', vmin=0, vmax=255)
#Görüntüdeki piksel değerleri 0 ile 255 arasında gösterilecek, 0 (siyah) ve 255 (beyaz) olacak şekilde tonlanacak.
plt.axis('on')  # Eksenleri aç-on / gizle-off
#default on olarak kullanılıyor
'''
Çizilecek figürün genişliği 12inç, yüksekliği 6inç olacak.
  Görüntülerin ve histogramların daha net görünmesini sağlar.
1 satır ve 2 sütundan oluşan bir grafik düzeni oluşturur ve şu an birinci sütuna odaklanır.
  İlk parametre 1 satır, ikincisi 2 sütun, üçüncüsü ise hangi sütuna yerleşeceğini belirler (burada 1. sütun).
Grafiğin başlığını "Orijinal Görüntü" olarak ayarlar.
Siyah-beyaz (grayscale) modunda görüntüyü çizer.
  imshow fonksiyonu görüntüyü çizerken, cmap='gray' ile gri tonlamalı bir renk haritası kullanıldığını belirtir.

Eğer vmin ve vmax parametreleri belirtilmezse, Matplotlib görüntüdeki minimum ve maksimum piksel değerlerine göre
  bu aralığı otomatik olarak belirler.
Ancak gri tonlamalı bir görüntüde piksel değerlerinin tam olarak 0 (siyah) ve 255 (beyaz) arasında olmasını
  sağlamak için bu parametreler kullanılır.
Bu, kontrastın doğru şekilde gösterilmesini sağlar.
'''

plt.subplot(1, 2, 2)
plt.title("Orijinal Histogram")
plt.hist(image.ravel(), 256, [0, 256])
plt.xlabel('Piksel Değerleri')
plt.ylabel('Frekans')
plt.show()
'''
Yine aynı düzen içinde 1 satır ve 2 sütundan oluşan grafiklerin 2. sütununa geçiş yapar.
ikinci grafiğin başlığını "Orijinal Histogram" olarak ayarlar.
Bu fonksiyon, görüntüdeki gri ton değerlerinin histogramını çizer.
  Histogram, bir görüntüdeki farklı gri tonlarının (0-255 arası) kaç defa geçtiğini gösterir.
  image.ravel(): Bu fonksiyon, çok boyutlu görüntü verisini tek boyutlu bir vektöre dönüştürür.
  Yani görüntünün tüm piksel değerlerini tek bir liste halinde toplar.
  256: Histogramdaki aralık sayısını belirtir, yani her bir gri ton değeri için bir aralık
  (0-255 arasındaki değerler).
  [0, 256]: Histogramın piksel değer aralığını belirtir (0 ile 256 arasında, yani 256 dahil değil).
Son olarak, bu satır her iki grafiği (orijinal görüntü ve histogram) ekrana çizer.
  Bu, yan yana yerleştirilmiş bir görüntü ve histogramı görmemizi sağlar.
'''

# Orijinal görüntünün histogramını farklı yöntemle çiz  -- BAR SAYISI 256
#from matplotlib import pyplot as plt
img=cv.imread("fener.jpg")
hist = cv.calcHist(img,[0],None,[256],[0,255])
plt.plot(hist)

#İki histogram çizim yöntemi arasındaki farklar:
'''
plt.hist(image.ravel(), 256, [0, 256]): Bu kod, histogramı hem hesaplar hem de çizer.
image.ravel() ifadesi, görüntüyü tek boyutlu bir diziye dönüştürerek her pikselin sayısını hesaplar.
görüntü verilerini kullanarak histogramı hem hesaplar hem de çizer.

hist = cv.calcHist([image], [0], None, [256], [0, 255]): Bu kod, OpenCV ile histogramı hesaplar ve
ardından Matplotlib ile çizim işlemi yapılır.
daha optimize bir fonksiyondur ve sadece histogramı hesaplar, görselleştirme işlemini kendimiz yaparız.

Büyük ve karmaşık görüntülerle çalışırken cv.calcHist() performans açısından daha uygundur,
ancak basit bir görselleştirme için plt.hist() daha hızlı ve kullanışlıdır.
'''

# Orijinal görüntünün histogramını farklı yöntemle çiz -- BAR SAYISI 10
from matplotlib import pyplot as plt
img=cv.imread("fener.jpg")
hist = cv.calcHist(img,[0],None,[10],[0,255])
plt.plot(hist)

# Histogram denkleştirme işlemi
equalized_image = cv.equalizeHist(image)
'''
cv.equalizeHist() fonksiyonu, OpenCV kütüphanesi tarafından sağlanan bir fonksiyondur
ve gri tonlamalı (siyah-beyaz) görüntülere histogram denkleştirme uygular.
Bu işlem, görüntüdeki kontrastı otomatik olarak artırır ve daha dengeli bir piksel yoğunluğu sağlar.
'''

# Histogram denkleştirme sonrası görüntüyü çiz
plt.figure(figsize=(12, 6))
plt.subplot(2, 2, 3)
plt.title("Denkleştirilmiş Görüntü")
plt.imshow(equalized_image, cmap='gray')
plt.axis('on')  # Eksenleri aç/gizle

plt.subplot(2, 2, 4)
plt.title("Denkleştirilmiş Histogram")
plt.hist(equalized_image.ravel(), 256, [0, 256])
plt.xlabel('Piksel Değerleri')
plt.ylabel('Frekans')
plt.show()

plt.tight_layout()  # Grafiklerin sıkışmasını önler
plt.show()

# Orijinal ve denkleştirilmiş görüntüleri kaydet
cv.imwrite('orijinal_goruntu.jpg', image)
cv.imwrite('denklestirilmis_goruntu.jpg', equalized_image)

# CDF (Kümülatif Dağılım Fonksiyonu) hesaplama ve gösterme
def plot_cdf(img, title):
    #Histogram Hesaplama: np.histogram() ile görüntüdeki piksel değerlerinin dağılımı hesaplanır.
    #img.flatten() ile görüntü 1D (tek boyutlu) vektöre dönüştürülür.
    hist, bins = np.histogram(img.flatten(), 256, [0,256])
    #Kümülatif Dağılım (CDF): hist.cumsum() ile histogramdaki değerlerin kümülatif toplamı alınır.
    #Bu, CDF'yi oluşturur.
    cdf = hist.cumsum()
    #CDF'nin Normalize Edilmesi: CDF, histogramın maksimum değerine göre normalize edilir.
    #Bu, CDF'nin histogramla aynı ölçekte gösterilebilmesini sağlar.
    cdf_normalized = cdf * hist.max() / cdf.max()

    plt.plot(cdf_normalized, color = 'b')  #CDF'yi mavi renkte çizer.
    #histogramı kırmızı renkte yarı saydam olarak çizer.
    #alpha=0.5: Histogramın saydamlık seviyesi, CDF'nin histogramın üzerinde görünmesini sağlar.
    plt.hist(img.flatten(), 256, [0,256], color = 'r', alpha=0.5)
    plt.xlim([0, 256])  #X eksenini 0-256 piksel değer aralığında sınırlar.
    plt.legend(('CDF', 'Histogram'), loc = 'upper left')  #Grafiğin sol üst köşesine, CDF ve Histogram için bir açıklama ekler.
    plt.title(title)  #Grafiğin başlığını dinamik olarak ayarlamak için kullanılır (örneğin "Orijinal Görüntü CDF").
    plt.show()

# Orijinal görüntü için CDF
plot_cdf(image, "Orijinal Görüntü CDF")
#Orijinal Görüntü CDF: Genellikle dar bir aralıkta yoğunlaşmış olabilir,
#çünkü orijinal görüntüde kontrast eksikliği varsa piksel değerleri sınırlı bir aralığa yığılmıştır.

# Denkleştirilmiş görüntü için CDF
plot_cdf(equalized_image, "Denkleştirilmiş Görüntü CDF")
#Denkleştirilmiş Görüntü CDF: Histogram denkleştirme işlemi, CDF'yi daha düzgün bir şekilde yayar,
#böylece görüntüdeki kontrast daha geniş bir aralığa yayılmış olur.

# CLAHE nesnesi oluşturuyoruz
clahe = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
image_AHE = clahe.apply(image)

# İmgeleri yan yana görüntüleyelim

# Görüntüleri yan yana birleştir
son = np.hstack((image, image_AHE))

# Görüntüleri Matplotlib ile göster
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Orijinal Görüntü')
plt.imshow(image, cmap='gray', vmin=0, vmax=255)
plt.axis('off')  # Eksenleri kapat

plt.subplot(1, 2, 2)
plt.title('CLAHE Uygulaması')
plt.imshow(image_AHE, cmap='gray', vmin=0, vmax=255)
plt.axis('off')  # Eksenleri kapat

plt.tight_layout()
plt.show()

